
services:
  # Database
  skillgaug-db:
    image: postgres:16-alpine
    container_name: skillgaug-db-1
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-skillgaug}
      POSTGRES_USER: ${POSTGRES_USER:-skillgaug}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillgaug_dev}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - skillgaug

  # Redis Cache
  skillgaug-redis:
    image: redis:7-alpine
    container_name: skillgaug-redis-1
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-skillgaug_redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - skillgaug

  # API Server (Fastify)
  skillgaug-api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: development
    container_name: skillgaug-api-1
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-skillgaug}:${POSTGRES_PASSWORD:-skillgaug_dev}@skillgaug-db:5432/${POSTGRES_DB:-skillgaug}
      REDIS_URL: redis://:${REDIS_PASSWORD:-skillgaug_redis}@skillgaug-redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "4000:4000"
    volumes:
      - ./api:/app
      - /app/node_modules
      - /app/database
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for code execution
    depends_on:
      - skillgaug-db
      - skillgaug-redis
    networks:
      - skillgaug

  # Web Frontend (Next.js)
  skillgaug-web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: development
    container_name: skillgaug-web-1
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:4000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-super-secret-nextauth-key-change-this}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    depends_on:
      - skillgaug-api
    networks:
      - skillgaug

  # MCP - Serena (Development only)
  skillgaug-serena-mcp:
    image: ghcr.io/oraios/serena:latest
    container_name: skillgaug-serena-mcp-1
    restart: unless-stopped
    ports:
      - "9121:9121"
      - "24282:24282"
    volumes:
      - .:/workspaces/projects/coding_test_platform:ro
      - ./serena_config:/root/.serena
      - serena_cache:/serena/.cache
    environment:
      SERENA_PROJECT: /workspaces/projects/coding_test_platform
      SERENA_CONTEXT: ide-assistant
    networks:
      - skillgaug
    profiles:
      - development
      - mcp
    stdin_open: true
    tty: true
    command: serena start-mcp-server --transport sse --port 9121
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:24282"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP - Playwright (Development only) - 安定化版
  skillgaug-playwright-mcp:
    image: mcr.microsoft.com/playwright:v1.40.0-jammy
    working_dir: /workspace
    container_name: skillgaug-playwright-mcp-1
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      MCP_PORT: 3001
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
      DISPLAY: ":99"
    volumes:
      - .:/workspace
      - ./tests/screenshots:/workspace/tests/screenshots
      - ./tests/videos:/workspace/tests/videos
      - ./tests/reports:/workspace/tests/reports
      - playwright_browsers:/ms-playwright
    networks:
      - skillgaug
    profiles:
      - development
      - mcp
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo '[INIT] Starting Playwright MCP Server setup...' &&
        
        # Xvfb起動（バックグラウンド表示）
        Xvfb :99 -ac -screen 0 1280x1024x16 &
        
        # 依存関係セットアップ
        cd /workspace/tests/playwright-mcp &&
        npm ci --silent &&
        echo '[INIT] playwright-mcp dependencies installed' &&
        
        # Playwrightブラウザインストール
        npx playwright install --with-deps chromium &&
        echo '[INIT] Playwright browsers installed' &&
        
        # テストディレクトリ設定
        cd /workspace/tests &&
        npm install --silent &&
        echo '[INIT] tests dependencies installed' &&
        
        # スクリーンショット・レポートディレクトリ作成
        mkdir -p ./screenshots ./videos ./reports &&
        echo '[INIT] Output directories created' &&
        
        # HTTPヘルスチェックエンドポイント起動（バックグラウンド）
        echo '[INIT] Starting HTTP health endpoint...' &&
        node /workspace/tests/mcp-playwright-http-server.js &
        echo '[INIT] HTTP health endpoint available on port 3001' &&
        
        # コンテナを起動状態に維持（exec経由でStdio MCPサーバーを実行）
        tail -f /dev/null
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  playwright_browsers:
    driver: local
  serena_cache:
    driver: local

networks:
  skillgaug:
    driver: bridge