EPICS,1,2,3,4
T-001,5,1,P1,プロジェクトリポジトリの作成 (Git)
T-002,6,1,P1,フロントエンド開発環境のセットアップ (Next.js)
T-003,7,1,P1,バックエンドサービス開発環境のセットアップ (Node.js)
T-004,8,1,P1,Dockerによるサンドボックス実行環境の構築
T-005,9,1,P2,CI/CDパイプラインの初期設定 (GitHub Actions)
T-006,10,1,P2,API Gatewayのセットアップ
T-007,11,1,P1,**Docs**: 開発環境セットアップマニュアルの作成
T-008,12,1,P1,開発環境マニュアル: `docker-compose.yml` の作成と設定
T-009,13,1,P1,開発環境マニュアル: 必須ツール(Git, Docker, Node.js)のインストール手順
T-010,14,1,P1,開発環境マニュアル: `docker compose up`による全サービス起動手順
T-011,15,1,P2,開発環境マニュアル: DBマイグレーションと初期データ投入の手順
T-016,16,1,P1,フロントエンド: CSS基盤導入 (Tailwind CSS) とテーマ設定
T-017,17,1,P2,フロントエンド: UIアクセシビリティ基盤導入 (Radix UI)
T-018,18,1,P1,**Docs**: デザイントークン定義（色/間隔/角丸/影/タイポ）を設計書へ反映
T-019,19,1,P1,Tailwind テーマにデザイントークンをマッピング（CSS変数参照）
T-028,20,1,P2,ライト/ダークテーマ切替の実装（`data-theme` 切替と永続化）
T-029,21,1,P1,UIプリミティブの作成（Button/Input/Card/Dialog）とトークン適用
T-030,22,1,P1,**Testing**: TDD ガイドラインに沿ったテスト基盤（FE/BE）とスクリプト整備
T-012,23,2,P1,Userサービス: DBスキーマ設計とマイグレーション（TDDで単体/結合テスト作成）
T-013,24,2,P1,Userサービス: ユーザー登録APIの実装（先に失敗テスト→最小実装→リファクタ）
T-014,25,2,P1,Userサービス: ログインAPIとJWT発行機能の実装（TDD、失敗ケース含む）
T-015,26,2,P2,フロントエンド: ログイン・新規登録画面の実装（Testing LibraryでUI振る舞いのTDD）
T-020,27,3,P1,**Backend**: `PROBLEMS`, `TEST_CASES` のDBスキーマ設計とマイグレーション更新
T-021,28,3,P1,**Backend**: 問題作成API (`POST /api/v1/problems`) の実装 (バリデーション含む, TDD)
T-022,29,3,P1,**Backend**: 問題更新API (`PUT /api/v1/problems/:id`) の実装
T-023,30,3,P1,**Backend**: 問題一覧・詳細取得API (`GET`) の実装
T-024,31,3,P1,**Frontend**: 問題作成・編集ページのUI実装
T-025,32,3,P2,**Backend**: `PROBLEMS`テーブルに想定解答時間カラムを追加するマイグレーション
T-026,33,3,P2,**Backend**: 問題作成・更新APIで想定解答時間を保存できるようにする
T-027,34,3,P2,**Frontend**: 問題作成画面に想定解答時間の入力フィールドを追加
T-035,35,4,P1,Submission/Scoringサービス: DBスキーマ設計
T-031,36,4,P1,**Backend**: コード任意実行API (`POST /api/v1/execute`) の実装
T-032,37,4,P1,**Backend**: コード提出API (`POST /api/v1/submissions`) の実装
T-033,38,4,P1,Scoringサービス: 採点ロジックの実装
T-034,39,4,P1,**Frontend**: テスト受験画面の3ペインレイアウト実装（UI/TDD＋主要フローのE2E）
